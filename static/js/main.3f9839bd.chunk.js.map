{"version":3,"sources":["images sync /^/.//.*$","images/dog1.jpg","images/dog10.jpg","images/dog11.jpg","images/dog12.jpg","images/dog13.jpg","images/dog14.jpg","images/dog15.jpg","images/dog2.jpg","images/dog3.jpg","images/dog4.jpg","images/dog5.jpg","images/dog6.jpg","images/dog7.jpg","images/dog8.jpg","images/dog9.jpg","components/Navbar/Navbar.js","components/Jumbotron/Jumbotron.js","components/DogCard/DogCard.js","App.js","ServiceWorker.js","index.js"],"names":["map","./dog1.jpg","./dog10.jpg","./dog11.jpg","./dog12.jpg","./dog13.jpg","./dog14.jpg","./dog15.jpg","./dog2.jpg","./dog3.jpg","./dog4.jpg","./dog5.jpg","./dog6.jpg","./dog7.jpg","./dog8.jpg","./dog9.jpg","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","module","exports","p","Navbar","react_default","a","createElement","className","this","props","score","Component","Jumbotron","DogCard","onClick","imageClick","alt","image","replace","src","require","App","state","dog","clickedDog","event","currentDog","target","_this","indexOf","setState","wizard","sort","b","Math","random","alert","concat","_this2","components_Navbar_Navbar","components_Jumbotron_Jumbotron","components_DogCard_DogCard","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f9839bd.chunk.js","sourcesContent":["var map = {\n\t\"./dog1.jpg\": 20,\n\t\"./dog10.jpg\": 21,\n\t\"./dog11.jpg\": 22,\n\t\"./dog12.jpg\": 23,\n\t\"./dog13.jpg\": 24,\n\t\"./dog14.jpg\": 25,\n\t\"./dog15.jpg\": 26,\n\t\"./dog2.jpg\": 27,\n\t\"./dog3.jpg\": 28,\n\t\"./dog4.jpg\": 29,\n\t\"./dog5.jpg\": 30,\n\t\"./dog6.jpg\": 31,\n\t\"./dog7.jpg\": 32,\n\t\"./dog8.jpg\": 33,\n\t\"./dog9.jpg\": 34\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 19;","module.exports = __webpack_public_path__ + \"static/media/dog1.8146deb9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dog10.d3ee9681.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dog11.d759d333.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dog12.8316c3d0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dog13.a4d08f58.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dog14.166439ee.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dog15.ce1f2bfb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dog2.d6ee8f02.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dog3.2fbf6403.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dog4.d13c0c88.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dog5.ec88c026.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dog6.db6e9969.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dog7.c6e9ecc1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dog8.19fdfebd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dog9.c313cfdd.jpg\";","// Setup reusable react component for Navbar\nimport React, { Component } from 'react';\nimport \"./Navbar.css\";\n\nclass Navbar extends Component {\n    render() {\n        return (\n        <nav className=\"navbar navbar-default navbar-fixed-top\">\n            <li className=\"clickyLeft\">Cute Doggo Game!</li>\n           \n            <li className=\"clickyScoreRight\">Score: {this.props.score}</li>\n        </nav>\n        );\n    }\n}\n\nexport default Navbar;","import React from \"react\";\nimport \"./jumbotron.css\";\n\nconst Jumbotron = () => (\n    <header className = \"header\">\n    <h1>Click the DOGOS</h1>\n    <h2>Click on an image to earn points, but don't click on any image more than once!</h2>\n    </header>\n);\n\nexport default Jumbotron;","// sets up reusable component for DogCard\nimport React from \"react\";\nimport \"./DogCard.css\";\n\n// pass the image into each card\nconst DogCard = props => (\n    <div className=\"card\" onClick={props.imageClick}>\n        <div className=\"img-container\">\n      <img alt={props.image.replace(\".jpg\", \"\")} src={require(\"../../images/\" + props.image)} />\n    </div>\n    </div>\n\n);\n\nexport default DogCard;","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport DogCard from \"./components/DogCard\";\nimport dog from \"./doggo.json\";\n\n// sets state to 0 or empty for array of Dogs that have been clicked\nclass App extends Component {\n  state = {\n    dog,\n    clickedDog: [],\n    score: 0\n  };\n\n// when you click on an image, capture image clicked as a dog is  clicked\nimageClick = event => {\n  const currentDog = event.target.alt;\n  const dogClicked =\n    this.state.clickedDog.indexOf(currentDog) > -1;\n\n// if you click on a dog that has already been selected, the game is reset and cards reordered\n  if (dogClicked) {\n    this.setState({\n      wizard: this.state.dog.sort(function(a, b) {\n        return 0.5 - Math.random();\n      }),\n      clickedDog: [],\n      score: 0\n    });\n      alert(\"You already clicked that Dog! You've lost. Play again?\");\n\n// if you click on a new dog, your score is increased and cards reordered\n  } else {\n    this.setState(\n      {\n        dog: this.state.dog.sort(function(a, b) {\n          return 0.5 - Math.random();\n        }),\n        clickedDog: this.state.clickedDog.concat(\n          currentDog\n        ),\n        score: this.state.score + 1\n      },\n\n//if you get all 15 corrent you get a congrats message and the game resets        \n      () => {\n        if (this.state.score === 12) {\n          alert(\"Congrats! You Win!\");\n          this.setState({\n            dog: this.state.dog.sort(function(a, b) {\n              return 0.5 - Math.random();\n            }),\n            clickedDog: [],\n            score: 0\n          });\n        }\n      }\n    );\n  }\n};\n\n  render() {\n    return (\n      <div>\n      <Navbar \n        score={this.state.score} \n      />\n        <Jumbotron />\n        <div className=\"wrapper\">\n          {this.state.dog.map(dog => (\n            <DogCard\n              imageClick={this.imageClick}\n              id={dog.id}\n              key={dog.id}\n              image={dog.image}\n            />\n          )\n          )\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit http://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as ServiceWorker from './ServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nServiceWorker.unregister();"],"sourceRoot":""}